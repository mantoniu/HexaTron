services:
  mongodb:
    image: mongo:latest
    restart: always
    networks:
      - network-services
    command: [ "mongod", "--quiet" ]
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
    volumes:
      - mongo-data:/data/db
    expose:
      - "27017"

  wait-for-mongo:
    image: busybox
    depends_on:
      mongodb:
        condition: service_started
    command: >
      sh -c "
      for i in $(seq 1 10); do
        if nc -z mongodb 27017; then
          echo 'Mongo is up!'; exit 0;
        fi;
        echo 'Waiting for Mongo...'; sleep 3;
      done;
      echo 'Mongo not available'; exit 1"
    networks:
      - network-services

  database-initializer:
    build:
      context: ./database-initializer/
      network: host
    networks:
      - network-services
    environment:
      - URI=${URI_DATABASE_ROOT}
      - DB_NAME=${DB_NAME}

      - USER_COLLECTION=${USER_COLLECTION}
      - TOKEN_COLLECTION=${TOKEN_COLLECTION}
      - CONVERSATION_COLLECTION=${CONVERSATION_COLLECTION}
      - MESSAGE_COLLECTION=${MESSAGE_COLLECTION}
      - NOTIFICATIONS_COLLECTION=${NOTIFICATIONS_COLLECTION}

      - MONGO_USER_USERNAME=${MONGO_USER_USERNAME}
      - MONGO_USER_PWD=${MONGO_USER_PWD}
      - MONGO_CHAT_USERNAME=${MONGO_CHAT_USERNAME}
      - MONGO_CHAT_PWD=${MONGO_CHAT_PWD}
      - MONGO_NOTIFICATIONS_USERNAME=${MONGO_NOTIFICATIONS_USERNAME}
      - MONGO_NOTIFICATIONS_PWD=${MONGO_NOTIFICATIONS_PWD}
    depends_on:
      wait-for-mongo:
        condition: service_completed_successfully

  user-service:
    build:
      context: .
      dockerfile: user-service/Dockerfile
      network: host
    restart: always
    networks:
      - network-services
    environment:
      - NOTIFICATIONS_SERVICE_URL=${NOTIFICATIONS_SERVICE_URL}
      - USER_SERVICE_URL=${USER_SERVICE_URL}
      - URI=${URI_DATABASE_USER_SERVICE}
      - FILES_URL=${FILES_URL}

      - REFRESH_TOKEN_SECRET=${REFRESH_TOKEN_SECRET}
      - ACCESS_TOKEN_SECRET=${ACCESS_TOKEN_SECRET}

      - USER_COLLECTION=${USER_COLLECTION}
      - TOKEN_COLLECTION=${TOKEN_COLLECTION}

      - DB_NAME=${DB_NAME}
      - UTILS_API=${UTILS_API}
      - USER_API=${USER_API}
    expose:
      - "8003"
    depends_on:
      database-initializer:
        condition: service_completed_successfully
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8003/api/user/health" ]
      interval: 60s
      retries: 5
      start_period: 20s
      timeout: 5s

  game-service:
    build:
      context: .
      dockerfile: game-service/Dockerfile
      network: host
    restart: always
    networks:
      - network-services
    expose:
      - "8002"
    environment:
      - GATEWAY_URL=${GATEWAY_URL}
      - GAME_SERVICE_URL=${GAME_SERVICE_URL}
      - USER_SERVICE_URL=${USER_SERVICE_URL}
      - NOTIFICATIONS_SERVICE_URL=${NOTIFICATIONS_SERVICE_URL}
    depends_on:
      wait-for-mongo:
        condition: service_completed_successfully
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8002/health" ]
      interval: 60s
      retries: 5
      start_period: 20s
      timeout: 5s

  chat-service:
    build:
      context: .
      dockerfile: chat-service/Dockerfile
      network: host
    restart: always
    networks:
      - network-services
    expose:
      - "8005"
    environment:
      - DB_NAME=${DB_NAME}
      - URI=${URI_DATABASE_CHAT_SERVICE}
      - GATEWAY_URL=${GATEWAY_URL}
      - CHAT_SERVICE_URL=${CHAT_SERVICE_URL}
      - CHAT_API=${CHAT_API}
      - NOTIFICATIONS_SERVICE_URL=${NOTIFICATIONS_SERVICE_URL}


      - USER_COLLECTION=${USER_COLLECTION}
      - CONVERSATION_COLLECTION=${CONVERSATION_COLLECTION}
      - GLOBAL_CONVERSATION_ID=${GLOBAL_CONVERSATION_ID}
      - MESSAGE_COLLECTION=${MESSAGE_COLLECTION}
    depends_on:
      database-initializer:
        condition: service_completed_successfully
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8005/api/user/health" ]
      interval: 60s
      retries: 5
      start_period: 20s
      timeout: 5s

  notifications-service:
    build:
      context: .
      dockerfile: notifications-service/Dockerfile
      network: host
    restart: always
    networks:
      - network-services
    expose:
      - "8007"
    environment:
      - DB_NAME=${DB_NAME}
      - URI=${URI_DATABASE_NOTIFICATIONS_SERVICE}
      - GATEWAY_URL=${GATEWAY_URL}
      - NOTIFICATIONS_SERVICE_URL=${NOTIFICATIONS_SERVICE_URL}
      - NOTIFICATIONS_API=${NOTIFICATIONS_API}

      - USER_COLLECTION=${USER_COLLECTION}
      - NOTIFICATIONS_COLLECTION=${NOTIFICATIONS_COLLECTION}
    depends_on:
      database-initializer:
        condition: service_completed_successfully
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8007/api/notifications/health" ]
      interval: 60s
      retries: 5
      start_period: 20s
      timeout: 5s

  files:
    build:
      context: ./files/
      network: host
      target: prod
    restart: always
    volumes:
      - storage:/app/storage
    networks:
      - network-services
    expose:
      - "8001"
    depends_on:
      wait-for-mongo:
        condition: service_completed_successfully
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8001/health" ]
      interval: 60s
      retries: 5
      start_period: 20s
      timeout: 5s

  gateway:
    build:
      context: ./gateway/
      network: host
    restart: always
    networks:
      - network-services
    ports:
      - "8006:8006"
      - "8000:8000"
    environment:
      - NODE_ENV=production
      - USER_SERVICE_URL=${USER_SERVICE_URL}
      - GAME_SERVICE_URL=${GAME_SERVICE_URL}
      - CHAT_SERVICE_URL=${CHAT_SERVICE_URL}
      - NOTIFICATIONS_SERVICE_URL=${NOTIFICATIONS_SERVICE_URL}
      - FILES_URL=${FILES_URL}
      - GATEWAY_URL=${GATEWAY_URL}
      - REFRESH_TOKEN_SECRET=${REFRESH_TOKEN_SECRET}
      - ACCESS_TOKEN_SECRET=${ACCESS_TOKEN_SECRET}
      - DOC_API_SERVICE_URL=${DOC_API_SERVICE_URL}
    depends_on:
      game-service:
        condition: service_healthy
      doc-api:
        condition: service_completed_successfully

  doc-api:
    build:
      context: ./documentation-api/
      network: host
    networks:
      - network-services
    expose:
      - "8004"
    environment:
      - SERVICES_URL=${USER_SERVICE_URL}/api/user,${CHAT_SERVICE_URL}/api/chat,${NOTIFICATIONS_SERVICE_URL}/api/notifications
      - DOC_API_SERVICE_URL=${DOC_API_SERVICE_URL}
      - FILES_URL=${FILES_URL}
    depends_on:
      files:
        condition: service_healthy
      user-service:
        condition: service_healthy
      chat-service:
        condition: service_healthy
      notifications-service:
        condition: service_healthy

networks:
  network-services:
    driver: bridge

volumes:
  mongo-data:
  storage: